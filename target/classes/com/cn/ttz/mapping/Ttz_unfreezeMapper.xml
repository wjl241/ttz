<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cn.ttz.dao.Ttz_unfreezeDao" >
  <resultMap id="BaseResultMap" type="com.cn.ttz.pojo.Ttz_unfreeze" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="rate" property="rate" jdbcType="INTEGER" />
    <result column="receive_time" property="receiveTime" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, amount, create_time, update_time, status, rate, receive_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ttz_unfreeze
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ttz_unfreeze
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cn.ttz.pojo.Ttz_unfreeze" >
    insert into ttz_unfreeze (id, user_id, amount, 
      create_time, update_time, status, 
      rate, receive_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{amount,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=INTEGER}, #{updateTime,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, 
      #{rate,jdbcType=INTEGER}, #{receiveTime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cn.ttz.pojo.Ttz_unfreeze" >
    insert into ttz_unfreeze
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="rate != null" >
        rate,
      </if>
      <if test="receiveTime != null" >
        receive_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="rate != null" >
        #{rate,jdbcType=INTEGER},
      </if>
      <if test="receiveTime != null" >
        #{receiveTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cn.ttz.pojo.Ttz_unfreeze" >
    update ttz_unfreeze
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="rate != null" >
        rate = #{rate,jdbcType=INTEGER},
      </if>
      <if test="receiveTime != null" >
        receive_time = #{receiveTime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cn.ttz.pojo.Ttz_unfreeze" >
    update ttz_unfreeze
    set user_id = #{userId,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      rate = #{rate,jdbcType=INTEGER},
      receive_time = #{receiveTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 新增方法 -->
   <select id="selectAmountByUserId" resultType="java.lang.Double" parameterType="java.lang.Integer" >
    select if(sum(amount) is null,0,sum(amount))
    from ttz_unfreeze 
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  
  
  <select id="selectFreezeInfo" resultMap="BaseResultMap"  parameterType="java.util.Map" >
   SELECT a.receive_time as receive_time,user_id ,b.rate as rate,sum(commission) as amount FROM ttz_bill_orders AS a   
   INNER JOIN  (SELECT SUM(rate) AS rate,receive_time  FROM ttz_unfreeze AS c  WHERE create_time > #{create_time}
    and user_id = #{user_id}   GROUP BY c.receive_time) AS b
	ON b.receive_time = a.receive_time where
 	 user_id =  #{user_id} AND create_time >  #{create_time} and a.status in (2)  GROUP BY a.receive_time  ;
  </select>
  
  <!-- 对selectFreezeInfo 的补充，获取所有已领取红包的时间集合，然后过滤掉有解冻信息的情况，rate默认为0 -->
   <select id="selectFreezeInfoNoFreeze" resultMap="BaseResultMap"  parameterType="java.util.Map" >
  	SELECT a.receive_time as receive_time,user_id ,0 as rate,sum(commission) as amount FROM ttz_bill_orders as a 
  	where user_id =  #{user_id} AND create_time >  #{create_time}  and status = 2 GROUP BY a.receive_time  ;
  </select>
  
  
  <select id="getNotunFreezeInfo2" resultMap="BaseResultMap"  parameterType="java.util.Map" >
   select receive_time,user_id,sum(commission) as amount
    from ttz_bill_orders where user_id = #{user_id} and receive_time 
	not in (select receive_time  from ttz_unfreeze  where create_time &gt; #{create_time}   and user_id = #{user_id} 
	group by receive_time) and create_time &lt;=#{receive_time} and status = 2  group by receive_time 
  </select>
  
  
  
  <insert id="insertUnfreezes" parameterType="java.util.List" >
     <selectKey resultType ="java.lang.Integer" keyProperty= "id"
                   order= "AFTER">
                  SELECT LAST_INSERT_ID()
     </selectKey >
      insert into ttz_unfreeze ( user_id, amount, 
      create_time, update_time, status, 
      rate, receive_time)
    values 
    
     <foreach collection ="list" item="unFreeze" index= "index" separator =",">
           ( #{unFreeze.userId}, #{unFreeze.amount}, #{unFreeze.createTime}, #{unFreeze.updateTime}, #{unFreeze.status}, #{unFreeze.rate}, #{unFreeze.receiveTime} 
           )
     </foreach >
  </insert>


  <!-- 获取所有领取的金额 -->
  <select id="getYLQAmount" resultType="java.lang.Double"  parameterType="java.util.Map" >
  		select  if(sum(amount) is null,0,sum(amount)) from ttz_unfreeze where user_id = #{user_id} 
  		and receive_time = #{receive_time} order by create_time;
  </select>
  
  <!--  清除解冻信息-->
   <delete id="clearReadPacket" parameterType="java.lang.Integer" >
    delete from ttz_unfreeze
    where user_id = #{user_id,jdbcType=INTEGER}
  </delete>
</mapper>