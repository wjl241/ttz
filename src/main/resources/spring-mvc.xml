<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.ttz.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
   
   <!-- 线程执行器配置，用于任务注册   Spring Quartz定时器 配置文件详解 -->
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	 
	    <property name="corePoolSize" value="10" />
	 
	    <property name="maxPoolSize" value="100" />
	 
	    <property name="queueCapacity" value="500" />
	</bean>
	
	<!-- 业务对象 -->
	<bean id="bizObject1" class="com.cn.ttz.timer.OrderTask" />
	<!-- 业务对象 -->
	<bean id="bizObject2" class="com.cn.ttz.timer.billTask" />
	<!-- 业务对象 -->
	<bean id="bizObject3" class="com.cn.ttz.timer.PidTask" />
	<!-- 业务对象 -->
	<bean id="bizObject4" class="com.cn.ttz.timer.WLQTask" />
	<!-- 业务对象 -->
	<bean id="bizObject5" class="com.cn.ttz.timer.RedPacketExpireTask" />
	<!-- 业务对象 -->
	<bean id="bizObject6" class="com.cn.ttz.timer.NPCTask" />
	<!-- 业务对象 -->
	<bean id="bizObject7" class="com.cn.ttz.timer.TuanTask" />
	
	
	<!-- 调度业务 -->
	<bean id="jobDetail1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject1" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	
	<!-- 调度业务 -->
	<bean id="jobDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject2" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	
	<!-- 调度业务 -->
	<bean id="jobDetail3" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject3" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	<!-- 调度业务 -->
	<bean id="jobDetail4" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject4" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	<!-- 调度业务 -->
	<bean id="jobDetail5" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject5" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	<!-- 调度业务 -->
	<bean id="jobDetail6" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject6" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	
	<bean id="jobDetail7" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<!-- 调用的类 -->  
    	<property name="targetObject" ref="bizObject7" />
    	<!-- 调用类中的方法 -->  
    	<property name="targetMethod" value="doBiz" />
    	<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="false"/>  
	</bean>
	
	
	<!-- 增加调度触发器 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="jobDetail1" />
    	<!-- Cron表达式“10 */1 * * * ?”意为：从10秒开始，每1分钟执行一次。-->
    	<property name="cronExpression" value="10 0/1 * * * ?" />
	</bean>
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger1" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail1" />
	    <property name="startDelay" value="2000" />
	    <property name="repeatInterval" value="300000" />
	</bean>
	
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger2" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail2" />
	    <property name="startDelay" value="10000" />
	    <!-- 240000-->
	    <property name="repeatInterval" value="240000" />
	</bean>
	
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="cronTrigger3" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="jobDetail3" />
    	<!-- Cron表达式“0 46 13 * * ?”意为：每日0点10分执行。-->
    	<property name="cronExpression" value="0 10 0 * * ?" />
	</bean>
	
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger4" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail4" />
	    <property name="startDelay" value="2000" />
	    <property name="repeatInterval" value="120000" />
	</bean>
	
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="cronTrigger4" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="jobDetail4" />
    	<!-- Cron表达式“0 0 9 * * ?” 每天9点触发 -->
    	<property name="cronExpression" value="0 0 21 * * ?" />
	</bean>
	
	<!-- 该调度表示，延迟3秒启动，然后每隔5分钟执行一次。 -->
	<bean id="taskTrigger5" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail5" />
	    <property name="startDelay" value="3000" />
	    <property name="repeatInterval" value="300000" />
	</bean>
	
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger6" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail6" />
	    <property name="startDelay" value="10000" />
	    <property name="repeatInterval" value="250000" />
	</bean>
	<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger7" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail7" />
	    <property name="startDelay" value="1000" />
	    <property name="repeatInterval" value="320000" />
	</bean>
	
	
		<!-- 该调度表示，延迟10秒启动，然后每隔1分钟执行一次。 -->
	<bean id="taskTrigger42" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="jobDetail4" />
	    <property name="startDelay" value="1000" />
	    <property name="repeatInterval" value="300000" />
	</bean>
	
	
	
	
	
	
	<!-- 设置调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	        <!--  
	                 <ref bean="taskTrigger1" />
	          <ref bean="taskTrigger2" />
	          <ref bean="cronTrigger3" />
	         <ref bean="cronTrigger4" />
	          <ref bean="taskTrigger5" />    
	          <ref bean="taskTrigger6" /> 
	          <ref bean="taskTrigger7" /> 
	         -->
	        </list>
	        
	         
	    </property>
	    <property name="taskExecutor" ref="executor" />
	</bean>
	
</beans>